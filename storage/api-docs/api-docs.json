{
    "swagger": "2.0",
    "info": {
        "title": "WITS API",
        "version": "1.0"
    },
    "host": "localhost",
    "basePath": "",
    "schemes": [
        "http"
    ],
    "paths": {
        "/api/v1/assets": {
            "get": {
                "tags": [
                    "Asset"
                ],
                "summary": "Finds Pets by tags",
                "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findPetsByTags",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Tags to filter by",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "deprecated": false,
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/api/v1/example": {
            "get": {
                "tags": [
                    "Example"
                ],
                "summary": "Finds Pets by tags",
                "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findPetsByTags",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Tags to filter by",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "deprecated": false,
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Example"
                ],
                "responses": {
                    "200": {
                        "description": "An example resource"
                    }
                }
            }
        },
        "/api/v1/example/create": {
            "get": {
                "tags": [
                    "Example"
                ],
                "summary": "Show the form for creating a new resource.",
                "responses": {
                    "200": {
                        "description": "An example resource"
                    }
                }
            }
        },
        "/api/v1/example/{id}": {
            "get": {
                "tags": [
                    "Example"
                ],
                "responses": {
                    "200": {
                        "description": "An example resource"
                    }
                }
            },
            "put": {
                "tags": [
                    "Example"
                ],
                "responses": {
                    "200": {
                        "description": "An example resource"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Example"
                ],
                "responses": {
                    "200": {
                        "description": "An example resource"
                    }
                }
            }
        },
        "/api/v1/example/{id}/edit": {
            "get": {
                "tags": [
                    "Example"
                ],
                "responses": {
                    "200": {
                        "description": "An example resource"
                    }
                }
            }
        }
    },
    "definitions": {
        "Error": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "description": "Class ApiController",
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "description": "Class ApiController",
                    "type": "string"
                }
            }
        },
        "User": {
            "required": [
                "name",
                "email"
            ]
        }
    }
}